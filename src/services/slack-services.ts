interface SlackMessage {
  text: string;
  username?: string;
  icon_emoji?: string;
  icon_url?: string;
  channel?: string;
  blocks?: SlackBlock[];
  attachments?: SlackAttachment[];
}

interface SlackBlock {
  type: string;
  text?: {
    type: string;
    text: string;
    emoji?: boolean;
  };
  elements?: any[];
}

interface SlackAttachment {
  color?: string;
  fields?: Array<{
    title: string;
    value: string;
    short?: boolean;
  }>;
  footer?: string;
  ts?: number;
}

interface SlackServiceConfig {
  webhookUrl?: string;
  botToken?: string;
  defaultChannel?: string;
  defaultUsername?: string;
  defaultIcon?: string;
}

interface SlackApiResponse {
  ok: boolean;
  error?: string;
  channel?: string;
  ts?: string;
  message?: {
    text: string;
    user: string;
    ts: string;
  };
}

export class SlackService {
  private webhookUrl?: string;
  private botToken?: string;
  private defaultChannel?: string;
  private defaultUsername: string;
  private defaultIcon: string;
  private baseUrl: string = "https://slack.com/api";

  constructor(config: SlackServiceConfig) {
    this.webhookUrl = config.webhookUrl;
    this.botToken = config.botToken;
    this.defaultChannel = config.defaultChannel;
    this.defaultUsername = config.defaultUsername || "AI Commit Bot";
    this.defaultIcon = config.defaultIcon || ":robot_face:";
  }

  /**
   * Send a simple text message to Slack
   */
  async sendMessage(text: string, channel?: string): Promise<boolean> {
    try {
      const message: SlackMessage = {
        text,
        username: this.defaultUsername,
        icon_emoji: this.defaultIcon,
        channel: channel || this.defaultChannel,
      };

      return await this.sendSlackMessage(message);
    } catch (error) {
      console.error("Error sending Slack message:", error);
      return false;
    }
  }

  /**
   * Send a formatted daily standup message using modern Slack Block Kit
   */
  async sendDailyStandup(summary: string, channel?: string): Promise<boolean> {
    try {
      const today = new Date().toDateString();
      const currentTime = new Date().toLocaleTimeString();

      const message: SlackMessage = {
        text: `ðŸ“… Daily Standup - ${today}`,
        username: this.defaultUsername,
        icon_emoji: ":calendar:",
        channel: channel || this.defaultChannel,
        blocks: [
          {
            type: "header",
            text: {
              type: "plain_text",
              text: `ðŸ“… Daily Standup - ${today}`,
              emoji: true,
            },
          },
          {
            type: "section",
            text: {
              type: "mrkdwn",
              text: summary,
            },
          },
          {
            type: "divider",
          },
          {
            type: "context",
            elements: [
              {
                type: "mrkdwn",
                text: `ðŸ¤– Generated by ${this.defaultUsername} at ${currentTime}`,
              },
            ],
          },
        ],
      };

      return await this.sendSlackMessage(message);
    } catch (error) {
      console.error("Error sending daily standup:", error);
      return false;
    }
  }

  /**
   * Send a rich message with attachments
   */
  async sendRichMessage(
    text: string,
    attachments: SlackAttachment[],
    channel?: string
  ): Promise<boolean> {
    try {
      const message: SlackMessage = {
        text,
        username: this.defaultUsername,
        icon_emoji: this.defaultIcon,
        channel: channel || this.defaultChannel,
        attachments,
      };

      return await this.sendSlackMessage(message);
    } catch (error) {
      console.error("Error sending rich message:", error);
      return false;
    }
  }

  /**
   * Send commit summary with formatted details using modern Slack Block Kit
   */
  async sendCommitSummary(
    summary: string,
    commitCount: number,
    channel?: string
  ): Promise<boolean> {
    try {
      const today = new Date().toDateString();
      const currentTime = new Date().toLocaleTimeString();

      // Clean up the summary text to ensure proper Slack formatting
      const cleanSummary = this.cleanSlackText(summary);

      const message: SlackMessage = {
        text: `ðŸš€ Development Update - ${today}`,
        username: this.defaultUsername,
        icon_emoji: ":rocket:",
        channel: channel || this.defaultChannel,
        blocks: [
          {
            type: "header",
            text: {
              type: "plain_text",
              text: `ðŸš€ Development Update`,
              emoji: true,
            },
          },
          {
            type: "section",
            text: {
              type: "mrkdwn",
              text: `Okay, here's a standup update based on those commits:`,
            },
          },
          {
            type: "section",
            text: {
              type: "mrkdwn",
              text: `*Standup Update:*\n${cleanSummary}`,
            },
          },
          {
            type: "divider",
          },
          {
            type: "context",
            elements: [
              {
                type: "mrkdwn",
                text: `ðŸ“Š Commits Today: ${commitCount} | ðŸ“… Date: ${today}`,
              },
            ],
          },
          {
            type: "context",
            elements: [
              {
                type: "mrkdwn",
                text: `ðŸ¤– Generated by ${this.defaultUsername} at ${currentTime}`,
              },
            ],
          },
        ],
      };

      return await this.sendSlackMessage(message);
    } catch (error) {
      console.error("Error sending commit summary:", error);
      return false;
    }
  }

  /**
   * Core method to send message via webhook or Web API
   */
  private async sendSlackMessage(message: SlackMessage): Promise<boolean> {
    // Try webhook first (simpler)
    if (this.webhookUrl) {
      return await this.sendViaWebhook(message);
    }

    // Fall back to Web API
    if (this.botToken) {
      return await this.sendViaWebApi(message);
    }

    throw new Error("No Slack webhook URL or bot token configured");
  }

  /**
   * Send message via Slack webhook
   */
  private async sendViaWebhook(message: SlackMessage): Promise<boolean> {
    try {
      const response = await fetch(this.webhookUrl!, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(message),
      });

      if (!response.ok) {
        throw new Error(
          `Webhook request failed: ${response.status} ${response.statusText}`
        );
      }

      const result = await response.text();
      return result === "ok";
    } catch (error) {
      console.error("Webhook error:", error);
      return false;
    }
  }

  /**
   * Send message via Slack Web API
   */
  private async sendViaWebApi(message: SlackMessage): Promise<boolean> {
    try {
      const response = await fetch(`${this.baseUrl}/chat.postMessage`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${this.botToken}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          channel: message.channel || this.defaultChannel,
          text: message.text,
          username: message.username,
          icon_emoji: message.icon_emoji,
          icon_url: message.icon_url,
          blocks: message.blocks,
          attachments: message.attachments,
        }),
      });

      if (!response.ok) {
        throw new Error(
          `Web API request failed: ${response.status} ${response.statusText}`
        );
      }

      const result = (await response.json()) as SlackApiResponse;

      if (!result.ok) {
        throw new Error(`Slack API error: ${result.error}`);
      }

      return true;
    } catch (error) {
      console.error("Web API error:", error);
      return false;
    }
  }

  /**
   * Clean up text for proper Slack formatting
   */
  private cleanSlackText(text: string): string {
    // Remove any double asterisks that might cause formatting issues
    return text
      .replace(/\*\*/g, "*") // Replace ** with * for proper Slack bold
      .replace(/\n\*/g, "\nâ€¢") // Replace * at start of lines with bullet points
      .replace(/^\*/g, "â€¢") // Replace * at very start with bullet point
      .trim();
  }

  /**
   * Test the Slack connection
   */
  async testConnection(): Promise<{
    success: boolean;
    method: string;
    error?: string;
  }> {
    try {
      const testMessage = {
        text: "ðŸ”§ Testing Slack connection from AI Commit Bot",
        username: this.defaultUsername,
        icon_emoji: ":white_check_mark:",
      };

      if (this.webhookUrl) {
        const success = await this.sendViaWebhook(testMessage);
        return {
          success,
          method: "webhook",
          error: success ? undefined : "Webhook test failed",
        };
      }

      if (this.botToken) {
        const success = await this.sendViaWebApi(testMessage);
        return {
          success,
          method: "web-api",
          error: success ? undefined : "Web API test failed",
        };
      }

      return {
        success: false,
        method: "none",
        error: "No webhook URL or bot token configured",
      };
    } catch (error) {
      return {
        success: false,
        method: "unknown",
        error: error instanceof Error ? error.message : "Unknown error",
      };
    }
  }
}

// Helper function to create Slack service
export function createSlackService(config: SlackServiceConfig): SlackService {
  return new SlackService(config);
}
